version: '3.8'

services:
  # Main AI Orchestration Service
  ai-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-orchestrator-main
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=all
      - AI_ORCHESTRATION_ENV=${AI_ORCHESTRATION_ENV:-development}
      - PYTHONPATH=/workspace/src
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - .:/workspace
      - ai_models:/workspace/models
      - ai_cache:/workspace/.cache
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"   # Main API
      - "8080:8080"   # Web Interface
      - "8888:8888"   # Jupyter Lab
      - "6006:6006"   # TensorBoard
    networks:
      - ai-network
    depends_on:
      - redis
      - postgres
      - prometheus
    healthcheck:
      test: ["CMD", "/workspace/health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for task queuing and caching
  redis:
    image: redis:7.2-alpine
    container_name: ai-orchestrator-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: ai-orchestrator-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_orchestration}
      - POSTGRES_USER=${POSTGRES_USER:-ai_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ai_password_change_me}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_admin} -d ${POSTGRES_DB:-ai_orchestration}"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-orchestrator-celery
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=all
      - AI_ORCHESTRATION_ENV=${AI_ORCHESTRATION_ENV:-development}
      - PYTHONPATH=/workspace/src
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/workspace
      - ai_models:/workspace/models
      - ai_cache:/workspace/.cache
    networks:
      - ai-network
    depends_on:
      - redis
      - postgres
    command: celery -A src.orchestration.tasks worker --loglevel=info --concurrency=4
    healthcheck:
      test: ["CMD", "celery", "-A", "src.orchestration.tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-orchestrator-beat
    restart: unless-stopped
    environment:
      - AI_ORCHESTRATION_ENV=${AI_ORCHESTRATION_ENV:-development}
      - PYTHONPATH=/workspace/src
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/workspace
      - ai_cache:/workspace/.cache
    networks:
      - ai-network
    depends_on:
      - redis
      - postgres
    command: celery -A src.orchestration.tasks beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ai-orchestrator-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ai-orchestrator-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_me}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - ai-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: ai-orchestrator-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-network
    depends_on:
      - ai-orchestrator
      - grafana
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: ai-orchestrator-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes for persistent data
volumes:
  ai_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/models
  ai_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/cache
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16